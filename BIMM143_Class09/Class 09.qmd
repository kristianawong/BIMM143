---
title: "Class 09: Halloween Mini Project"
author: "Kristiana Wong A16281367"
format: pdf
---

##Background
In this mini-project, you will explore FiveThirtyEight’s Halloween Candy dataset. Your task is to explore their candy dataset to find out answers to a various number of questions - but most of all your job is to have fun, learn by doing hands on data analysis, and hopefully make this type of analysis less frightining for the future! Let’s get started.

##1. Importing candy dataset
First things first, let’s get the data from the FiveThirtyEight GitHub repo. You can either read from the URL directely or download this candy-data.csv file and place it in your project directory. Make sure to download the csv file first and redirect it into your Project Class 09 folder.
```{r}
candy_file <- "candy-data.csv"
candy = read.csv(candy_file, row.names=1)
head(candy)
```

Q1. How many different candy types are in this dataset?
```{r}
nrow(candy)
```
85 types of candy in this data set.

Q2. How many fruity candy types are in the dataset?
```{r}
sum(candy$fruity)
```
There are 38 fruity candy types.

##2.  What is your favorite candy?

One of the most interesting variables in the dataset is 'winpercent'. For a given candy this value is the percentage of people who prefer this candy over another randomly chosen candy from the dataset (what 538 term a matchup). Higher values indicate a more popular candy.

Q3. What is your favorite candy in the dataset and what is it’s winpercent value?
```{r}
candy["Kit Kat", ]$winpercent
```
76.7686%

Q4. What is the winpercent value for “Kit Kat”?
76.7686%

Q5. What is the winpercent value for “Tootsie Roll Snack Bars”?
```{r}
candy["Tootsie Roll Snack Bars", ]$winpercent
```
49.6535%


There is a useful skim() function in the skimr package that can help give you a quick overview of a given dataset. Let’s install this package and try it on our candy data.
```{r}
library("skimr")
skim(candy)
```
Q6. Is there any variable/column that looks to be on a different scale to the majority of the other columns in the dataset?
The winpercent variable looks to be on a different scale than the majority of the other columns in the data set.

Q7. What do you think a zero and one represent for the candy$chocolate column
I think the 0 represents the number of missing variables within the chocolate data in the candy data set. The 1 represents the percentage of non-missing variables in the chocolate data in the candy data set (i.e complete chocolate data).


Q8. Plot a histogram of winpercent values
```{r}
hist(candy$winpercent)
```

Q9. Is the distribution of winpercent values symmetrical?
No, it is not. It is normally distributed, as can be seen the data is skewed to the left.

Q10. Is the center of the distribution above or below 50%?
The center of distribution seems to be just below 50%.

Q11. On average is chocolate candy higher or lower ranked than fruit candy?
```{r}
mean(candy$chocolate)
mean(candy$fruity)
```
On average, chocolate candy is ranked lower than fruity candy.

Q12. Is this difference statistically significant?
```{r}
t.test(candy$chocolate, candy$fruity)
```
This difference is not statistically significant, as can be seen the p-value is 0.8781-- very high and not significant at all.

##3. Overall Candy Rankings
Let’s use the base R order() function together with head() to sort the whole dataset by winpercent.

Q13. What are the five least liked candy types in this set?
```{r}
head(candy[order(candy$winpercent, decreasing = F),], n=5)
```
Nik L Nip, Boston Baked Beans, Chiclets, Super Bubble and Jawbusters are the 5 least liked candy types.

Q14. What are the top 5 all time favorite candy types out of this set?
```{r}
head(candy[order(candy$winpercent, decreasing = T),], n=5)
```
Snickers, Kit Kat, Twix, Reese's Minatures, and Reese's Peanut Butter Cups are the 5 most liked candy types.

Q15. Make a first barplot of candy ranking based on winpercent values.
```{r}
library(ggplot2)

ggplot(candy, aes(x = winpercent, y = rownames(candy))) +
  geom_bar(stat = "identity") +
  labs(x = "Win Percentage", y = "Candy Type", title = "Bar Plot of Win Percentage by Candy Type")
```
Q16. This is quite ugly, use the reorder() function to get the bars sorted by winpercent?
```{r}
library(ggplot2)

ggplot(candy, aes(x = winpercent, y = reorder(rownames(candy), winpercent))) +
  geom_bar(stat = "identity") +
  labs(x = "Win Percentage", y = "Candy Type", title = "Bar Plot of Win Percentage by Candy Type")
```
#Time to add some useful color. 
Let’s setup a color vector (that signifies candy type) that we can then use for some future plots. We start by making a vector of all black values (one for each candy). Then we overwrite chocolate (for chocolate candy), brown (for candy bars) and red (for fruity candy) values.

```{r}
my_cols=rep("black", nrow(candy))
my_cols[as.logical(candy$chocolate)] = "chocolate"
my_cols[as.logical(candy$bar)] = "brown"
my_cols[as.logical(candy$fruity)] = "pink"
```

Now let’s try our barplot with these colors. Note that we use fill=my_cols for geom_col(). Experiment to see what happens if you use col=mycols.
```{r}
library(ggplot2)

ggplot(candy, aes(x = winpercent, y = reorder(rownames(candy), winpercent))) +
  geom_bar(stat = "identity") +
  geom_col(fill = my_cols) +
  labs(x = "Win Percentage", y = "Candy Type", title = "Bar Plot of Win Percentage by Candy Type")
```
Q17. What is the worst ranked chocolate candy?
Sixlets

Q18. What is the best ranked fruity candy?
Starburst

##4. Taking a look at pricepercent
What about value for money? What is the the best candy for the least money? One way to get at this would be to make a plot of winpercent vs the pricepercent variable. The pricepercent variable records the percentile rank of the candy’s price against all the other candies in the dataset. Lower vales are less expensive and high values more expensive.

```{r}
library(ggrepel)

# How about a plot of price vs win
ggplot(candy) +
  aes(winpercent, pricepercent, label=rownames(candy)) +
  geom_point(col=my_cols) + 
  geom_text_repel(col=my_cols, size=3.3, max.overlaps = 5)
```
Q19. Which candy type is the highest ranked in terms of winpercent for the least money - i.e. offers the most bang for your buck?
Reese's Miniatures

Q20. What are the top 5 most expensive candy types in the dataset and of these which is the least popular?
```{r}
ord <- order(candy$pricepercent, decreasing = TRUE)
head( candy[ord,c(11,12)], n=5 )
```
Hershey's Krackel, Nik L Nip, Nestle Smarties, Ring pop, and Hershey's Milk Chocolate. Nik L Nip is the least popular.

##5. Exploring the correlation structure
Now that we’ve explored the dataset a little, we’ll see how the variables interact with one another. We’ll use correlation and view the results with the corrplot package to plot a correlation matrix.
```{r}
library(corrplot)

cij <- cor(candy)
corrplot(cij)
```
Q22. Examining this plot what two variables are anti-correlated (i.e. have minus values)?
Chocolate and fruity are very heavily anti-correlated.

Q23. Similarly, what two variables are most positively correlated?
Peanut and chocolate are most positively correlated.

##6. Principal Component Analysis
Let’s apply PCA using the prcom() function to our candy dataset remembering to set the scale=TRUE argument.
```{r}

pca <- prcomp(candy, scale = TRUE)
summary(pca)

```
Now we can plot our PCA1 vs PCA2
```{r}
plot(pca$x[,1:2], xlab = "PC1", ylab = "PC2", col = my_cols, pch=16)
```
We can make a much nicer plot with the ggplot2 package but it is important to note that ggplot works best when you supply an input data.frame that includes a separate column for each of the aesthetics you would like displayed in your final plot. To accomplish this we make a new data.frame here that contains our PCA results with all the rest of our candy data. We will then use this for making plots below:
```{r}
# Make a new data-frame with our PCA results and candy data
my_data <- cbind(candy, pca$x[,1:3])
```

```{r}
p <- ggplot(my_data) + 
        aes(x=PC1, y=PC2, 
            size=winpercent/100,  
            text=rownames(my_data),
            label=rownames(my_data)) +
        geom_point(col=my_cols)
p
```

Again we can use the ggrepel package and the function ggrepel::geom_text_repel() to label up the plot with non overlapping candy names like. We will also add a title and subtitle like so:
```{r}
library(ggrepel)

p + geom_text_repel(size=3.3, col=my_cols, max.overlaps = 40)  + 
  theme(legend.position = "none") +
  labs(title="Halloween Candy PCA Space",
       subtitle="Colored by type: chocolate bar (dark brown), chocolate other (light brown), fruity (red), other (black)",
       caption="Data from 538")
```
```{r}
library(plotly)
ggplotly(p)

```
Let’s finish by taking a quick look at PCA our loadings. DNotice the opposite effects of chocolate and fruity and the similar effects of chocolate and bar (i.e. we already know they are correlated).
```{r}
par(mar=c(8,4,2,2))
barplot(pca$rotation[,1], las=2, ylab="PC1 Contribution")
```
Q24. What original variables are picked up strongly by PC1 in the positive direction? Do these make sense to you?
Fruity and hard and pluribus are strongly picked up in the positive direction. These do make sense to me, as we know that the fruity candies such as Starbursts or Air Heads are usually harder candies that come in packages of multiple. Hence, these variables are strongly correlated to one another.
