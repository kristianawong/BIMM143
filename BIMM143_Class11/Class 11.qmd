---
title: "Protein Structure Prediction with AlphaFold"
author: Kristiana Wong A16281367
format: pdf
---

AlphaFold has changed the game for protein structure prediction and allows anyone with sufficient bioinfoformatics skills to predict the strucutre of virtually any protein.

We ran AlphaFold via GoogleColab at:
https://github,com/sokrypton/ColabFold

In particular we used their AlphaFold2_mmseqs2 version that uses mmseqs2 rather than HMMMer for sequence search.

The main outputs include a set of **PDB structure files** along with matching **JSON format files** that tell us about how good the resulting models might be.

Let's start by loading these structures into Mol*
```{r}
library(bio3d)

pdb.files <- list.files(path = "HIVPr1_23119_0", pattern = "*.pdb", full.names = TRUE)
basename(pdb.files)
```

```{r}
library(bio3d)

# Read all data from Models 
#  and superpose/fit coords
pdbs <- pdbaln(pdb.files, fit=TRUE, exefile="msa")
```

```{r}
rd <- rmsd(pdbs, fit=T)
range(rd)
```

Draw a heatmap of these RMSD matrix values
```{r}
library(pheatmap)

colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)
```
Now lets plot the pLDDT values across all models. Recall that this information is in the B-factor column of each model and that this is stored in our aligned pdbs object as pdbs$b with a row per structure/model.
```{r}
# Read a reference PDB structure
pdb <- read.pdb("1hsg")

pdb$atom
```


```{r}
plotb3(pdbs$b[1,], typ="l", lwd=2, sse=pdbs)
points(pdbs$b[2,], typ="l", col="red")
points(pdbs$b[3,], typ="l", col="blue")
points(pdbs$b[4,], typ="l", col="darkgreen")
points(pdbs$b[5,], typ="l", col="orange")
abline(v=100, col="gray")
```

We can improve the superposition/fitting of our models by finding the most consistent “rigid core” common across all the models. For this we will use the core.find() function:
```{r}
core <- core.find(pdbs)
```

We can now use the identified core atom positions as a basis for a more suitable superposition and write out the fitted structures to a directory called corefit_structures:
```{r}
core.inds <- print(core, vol=0.5)
```
```{r}
xyz <- pdbfit(pdbs, core.inds, outpath="corefit_structures")

rf <- rmsf(xyz)

plotb3(rf, sse=pdb)
abline(v=100, col="gray", ylab="RMSF")
```
This plot shows the conformational variance between structures.

```{r}
# Change this for YOUR results dir name
results_dir <- "HIVPr1_23119_0" 
```

##Predicted Alignment Error for domains
Independent of the 3D structure, AlphaFold produces an output called Predicted Aligned Error (PAE). This is detailed in the JSON format result files, one for each model structure.
```{r}
library(jsonlite)

# Listing of all PAE JSON files
pae_files <- list.files(path = results_dir,
                        pattern=".*model.*\\.json",
                        full.names = TRUE)
```

```{r}
pae1 <- read_json(pae_files[1],simplifyVector = TRUE)
pae5 <- read_json(pae_files[5],simplifyVector = TRUE)

attributes(pae1)
```

```{r}
pae1$max_pae
pae5$max_pae
```
The maximum PAE values are useful for ranking models, in which we can see model 5 is worse than model 1.

We can plot the N by N (where N is the number of residues) PAE scores with ggplot or with functions from the Bio3D package:
```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)")
```
```{r}
plot.dmat(pae5$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```

We should really plot all of these using the same z range. Here is the model 1 plot again but this time using the same data range as the plot for model 5:
```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```
##Residue conservation from alignment file
```{r}
aln_file <- list.files(path=results_dir,
                       pattern=".a3m$",
                        full.names = TRUE)
aln_file
```
```{r}
aln <- read.fasta(aln_file[1], to.upper = TRUE)
```

How many sequences are in this alignment?
```{r}
dim(aln$ali)
```
5378 and 132 sequences

We can score residue conservation in the alignment with the conserv() function.
```{r}
sim <- conserv(aln)

plotb3(sim[1:99], sse=trim.pdb(pdb, chain="A"),
       ylab="Conservation Score")
```
```{r}
con <- consensus(aln, cutoff = 0.9)
con$seq
```

For a final visualization of these functionally important sites we can map this conservation score to the Occupancy column of a PDB file for viewing in molecular viewer programs such as Mol*, PyMol, VMD, chimera etc.
```{r}
m1.pdb <- read.pdb(pdb.files[1])
occ <- vec2resno(c(sim[1:99], sim[1:99]), m1.pdb$atom$resno)
write.pdb(m1.pdb, o=occ, file="m1_conserv.pdb")
```
![](M1_CONSERV.PDB.png)
