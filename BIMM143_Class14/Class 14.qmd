---
title: "Class 13 - Pathway Analysis from RNA-Seq Results"
author: "Kristiana Wong A16281367"
format: pdf
---

##Section 1. Differential Expression Analysis

```{r}
library(DESeq2)
```

```{r}
#Load Data
metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"

# Import metadata and take a peak
colData = read.csv(metaFile, row.names=1)
head(colData)
```
```{r}
countData = read.csv(countFile, row.names=1)
head(countData)
```
Q. Complete the code below to remove the troublesome first column from countData
```{r}
# Note we need to remove the odd first $length col
countData <- as.matrix(countData[,-1])
head(countData)
```
A lot of our data has 0s in it, so we need to use the rowSums function to filter these out.
Q. Complete the code below to filter countData to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).
```{r}
# Filter count data where you have 0 read count across all samples.
countData = countData[rowSums(countData) > 0,]
head(countData)
```
Now lets setup the DESeqDataSet object required for the DESeq() function and then run the DESeq pipeline.
```{r}
dds = DESeqDataSetFromMatrix(countData=countData,
                             colData=colData,
                             design=~condition)
dds = DESeq(dds)
```
```{r}
dds
```
Next, get results for the HoxA1 knockdown versus control siRNA (remember that these were labeled as "hoxa1_kd" and "control_sirna" in our original colData metaFile input to DESeq, you can check this above and by running resultsNames(dds) command).

Q. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.
```{r}
res = results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
```
```{r}
summary(res)
```
#Volcono plot
This is a plot of log2 fold change vs -log adjusted p-value.
```{r}
plot( res$log2FoldChange, -log(res$padj) )
```
Now lets add some color
```{r}
# Make a color vector for all genes
mycols <- rep("gray", nrow(res) )

# Color red the genes with absolute fold change above 2
mycols[ abs(res$log2FoldChange) > 2 ] <- "red"

# Color blue those with adjusted p-value less than 0.01
#  and absolute fold change more than 2
inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

plot( res$log2FoldChange, -log(res$padj), col= mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)" )
```
#Adding gene annotation

Since we mapped and counted against the Ensembl annotation, our results only have information about Ensembl gene IDs. However, our pathway analysis downstream will use KEGG pathways, and genes in KEGG pathways are annotated with Entrez gene IDs. We need to change the annotation into Ensembl key.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)

res$symbol = mapIds(org.Hs.eg.db,
                    keys=row.names(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

head(res, 10)
```

Q. Reorder these results by adjusted p-value and save them to a CSV file in your current project directory.
```{r}
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
```

##Section 2. Pathway Analysis
The gageData package has pre-compiled databases mapping genes to KEGG pathways and GO terms for common organisms. kegg.sets.hs[sigmet.idx.hs] gives you the "cleaner" gene sets of signaling and metabolic pathways only.

```{r}
library(pathview)
```
```{r}
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

The main gage() function requires a named vector of fold changes, where the names of the values are the Entrez gene IDs.
```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Now lets run the pathway analysis:
```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
# Look at the first few down (less) pathways
head(keggres$less)
```
Now lets look at the pathway data.
```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```
![ ](hsa04110.pathview.png)

```{r}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa04110", kegg.native=FALSE)
```
Let's process our results a bit more to pull out the top 5 upregulated pathways, then further process that just to get the pathway IDs needed by the pathview() function. We'll use these KEGG pathway IDs for pathview plotting below.
```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```
```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```
![ ](hsa04640.pathview.png)

![ ](hsa04630.pathview.png)

![ ](hsa00140.pathview.png)

![ ](hsa04142.pathview.png)

![ ](hsa04330.pathview.png)
Q. Can you do the same procedure as above to plot the pathview figures for the top 5 down-regulated pathways?
```{r}
## Focus on top 5 downregulated pathways
keggresless <- rownames(keggres$less)[1:5]

# Extract the 8 character long IDs part of each string
keggreslessids = substr(keggresless, start=1, stop=8)
keggreslessids
```
```{r}
pathview(gene.data=foldchanges, pathway.id=keggreslessids, species="hsa")
```
![ ](hsa04110.pathview.png)
![ ](hsa03013.pathview.png)
![ ](hsa03030.pathview.png)
![ ](hsa03440.pathview.png)
![ ](hsa04114.pathview.png)

##Section 3. Gene Ontology (GO)
We can also do a similar procedure with gene ontology. go.subs.hs is a named list containing indexes for the Biological Process ontologies.
```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

##Section 4. Reactome Analysis
Reactome is a database consisting of biological molecules and their relation to pathways and processes. Let's now conduct over-representation enrichment analysis and pathway-topology analysis with Reactome using the previous list of significant genes generated from our differential expression results above.
```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))

write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

Perform pathway analysis online at the Reactome website. Select “choose file” to upload your significant gene list. Then, select the parameters “Project to Humans”, then click “Analyze”.

Q: What pathway has the most significant “Entities p-value”? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?
Cell cycle, cell cycle mitotic, mitotic prometaphase, and mitotic spindle checkpoints. This is similar to the KEGG results, which showed that cell cycle and DNA replication were the most significant results. What could cause a difference is the accessibility to data, and that KEGG seems to group the genes in a more broad sense.